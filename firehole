#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2012 Frédéric Bertolus.
#
# This file is part of Firehole.
#
# Firehole is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Firehole is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Perroquet.  If not, see <http://www.gnu.org/licenses/>.

import sys
import asyncore
import socket
import time
import signal

def main():
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "listen":
            listen()
        elif command == "attack":
            if len(sys.argv) > 2:
                host = sys.argv[2]
                attack(host)
            else:
                print "The 'attack' command must be follow by an host parameter"
                print ""
                print_help()    
        else:
            print_help()
    else:
        print_help()

def print_help():
    print "usage: firehole listen  "
    print "                 Open all available port and wait for connections"
    print "usage: firehole attack HOSTNAME"
    print "                 Try to connect to open to all tcp port on the host"

listening = True

def listen():
    
    def signal_handler(signal, frame):
        global listening
        listening = False
    
    signal.signal(signal.SIGINT, signal_handler)

    
    socket_list = list();

    #Listen all 65536 port
    for i in range(65536):
        s= create_listening_socket(i)
        if s:
            socket_list.append((i,s))
    
    print "Use <Ctrl><C> to stop to listen and generate a rapport"
    
    while listening:
        for port,s in socket_list:
            try:
                conn, addr = s.accept()
                if conn:
                    print "Connection recevied on port "+str(port)
                    conn.close()
            except socket.error, e:
                pass
        time.sleep(0.001)            
        
    print "--------------"
    

def create_listening_socket(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        s.bind(("", port))
        s.listen(1)
        s.setblocking(0)
    except socket.error, e:
        print "Fail to open port "+str(port)+ ": %s" %e
        s.close()
        return None
    
    return s

def attack(host):
    clients = []

    for i in range(65536):
        clients.append(client(host, i))
    
    asyncore.loop(use_poll=True, map=mymap)

mymap = {}

class client(asyncore.dispatcher):
    def __init__(self, host, port):
        print 'port '+str(port)
        asyncore.dispatcher.__init__(self, map=mymap)
        self.host = host
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))

    def handle_connect(self):
        print 'Connected to', self.host

    def handle_close(self):
        print 'Close'
        self.close()

    def handle_write(self):
        self.send('')

    def handle_read(self):
        print ' ', self.recv(1024)



if __name__ == '__main__':
    main()

